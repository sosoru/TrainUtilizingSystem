//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using global::System.Linq;

namespace LightSwitchApplication.Implementation
{
    
    [global::System.ServiceModel.DomainServices.Hosting.EnableClientAccess()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public class ApplicationDataDomainService
        : global::Microsoft.LightSwitch.ServerGenerated.Implementation.DomainService<global::ApplicationData.Implementation.ApplicationDataObjectContext>
    {
    
        public ApplicationDataDomainService() : base()
        {
        }
    
    #region Public Methods
    
    #region NeededParts
    
        public void InsertNeededParts(global::ApplicationData.Implementation.NeededParts entity)
        {
            if (entity.EntityState != global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.ObjectStateManager.ChangeObjectState(entity, global::System.Data.EntityState.Added);
            }
            else
            {
                this.ObjectContext.NeededPartsSet.AddObject(entity);
            }
        }
    
        public void UpdateNeededParts(global::ApplicationData.Implementation.NeededParts currentEntity)
        {
            global::System.ServiceModel.DomainServices.EntityFramework.ObjectContextExtensions.AttachAsModified(this.ObjectContext.NeededPartsSet, currentEntity, this.ChangeSet.GetOriginal(currentEntity));
        }
    
        public void DeleteNeededParts(global::ApplicationData.Implementation.NeededParts entity)
        {
            if (entity.EntityState == global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.NeededPartsSet.Attach(entity);
            }
    
            this.DeleteEntity(entity);
        }
    #endregion
    
    #region AvailableParts
    
        public void InsertAvailableParts(global::ApplicationData.Implementation.AvailableParts entity)
        {
            if (entity.EntityState != global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.ObjectStateManager.ChangeObjectState(entity, global::System.Data.EntityState.Added);
            }
            else
            {
                this.ObjectContext.AvailablePartsSet.AddObject(entity);
            }
        }
    
        public void UpdateAvailableParts(global::ApplicationData.Implementation.AvailableParts currentEntity)
        {
            global::System.ServiceModel.DomainServices.EntityFramework.ObjectContextExtensions.AttachAsModified(this.ObjectContext.AvailablePartsSet, currentEntity, this.ChangeSet.GetOriginal(currentEntity));
        }
    
        public void DeleteAvailableParts(global::ApplicationData.Implementation.AvailableParts entity)
        {
            if (entity.EntityState == global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.AvailablePartsSet.Attach(entity);
            }
    
            this.DeleteEntity(entity);
        }
    #endregion
    
    #region PriceInfo
    
        public void InsertPriceInfo(global::ApplicationData.Implementation.PriceInfo entity)
        {
            if (entity.EntityState != global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.ObjectStateManager.ChangeObjectState(entity, global::System.Data.EntityState.Added);
            }
            else
            {
                this.ObjectContext.PriceInfoSet.AddObject(entity);
            }
        }
    
        public void UpdatePriceInfo(global::ApplicationData.Implementation.PriceInfo currentEntity)
        {
            global::System.ServiceModel.DomainServices.EntityFramework.ObjectContextExtensions.AttachAsModified(this.ObjectContext.PriceInfoSet, currentEntity, this.ChangeSet.GetOriginal(currentEntity));
        }
    
        public void DeletePriceInfo(global::ApplicationData.Implementation.PriceInfo entity)
        {
            if (entity.EntityState == global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.PriceInfoSet.Attach(entity);
            }
    
            this.DeleteEntity(entity);
        }
    #endregion
    
    #region StoreInfo
    
        public void InsertStoreInfo(global::ApplicationData.Implementation.StoreInfo entity)
        {
            if (entity.EntityState != global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.ObjectStateManager.ChangeObjectState(entity, global::System.Data.EntityState.Added);
            }
            else
            {
                this.ObjectContext.StoreInfoSet.AddObject(entity);
            }
        }
    
        public void UpdateStoreInfo(global::ApplicationData.Implementation.StoreInfo currentEntity)
        {
            global::System.ServiceModel.DomainServices.EntityFramework.ObjectContextExtensions.AttachAsModified(this.ObjectContext.StoreInfoSet, currentEntity, this.ChangeSet.GetOriginal(currentEntity));
        }
    
        public void DeleteStoreInfo(global::ApplicationData.Implementation.StoreInfo entity)
        {
            if (entity.EntityState == global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.StoreInfoSet.Attach(entity);
            }
    
            this.DeleteEntity(entity);
        }
    #endregion
    
    #region NeededBoards
    
        public void InsertNeededBoards(global::ApplicationData.Implementation.NeededBoards entity)
        {
            if (entity.EntityState != global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.ObjectStateManager.ChangeObjectState(entity, global::System.Data.EntityState.Added);
            }
            else
            {
                this.ObjectContext.NeededBoardsSet.AddObject(entity);
            }
        }
    
        public void UpdateNeededBoards(global::ApplicationData.Implementation.NeededBoards currentEntity)
        {
            global::System.ServiceModel.DomainServices.EntityFramework.ObjectContextExtensions.AttachAsModified(this.ObjectContext.NeededBoardsSet, currentEntity, this.ChangeSet.GetOriginal(currentEntity));
        }
    
        public void DeleteNeededBoards(global::ApplicationData.Implementation.NeededBoards entity)
        {
            if (entity.EntityState == global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.NeededBoardsSet.Attach(entity);
            }
    
            this.DeleteEntity(entity);
        }
    #endregion
    
    #region Table1Item
    
        public void InsertTable1Item(global::ApplicationData.Implementation.Table1Item entity)
        {
            if (entity.EntityState != global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.ObjectStateManager.ChangeObjectState(entity, global::System.Data.EntityState.Added);
            }
            else
            {
                this.ObjectContext.Table1ItemSet.AddObject(entity);
            }
        }
    
        public void UpdateTable1Item(global::ApplicationData.Implementation.Table1Item currentEntity)
        {
            global::System.ServiceModel.DomainServices.EntityFramework.ObjectContextExtensions.AttachAsModified(this.ObjectContext.Table1ItemSet, currentEntity, this.ChangeSet.GetOriginal(currentEntity));
        }
    
        public void DeleteTable1Item(global::ApplicationData.Implementation.Table1Item entity)
        {
            if (entity.EntityState == global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.Table1ItemSet.Attach(entity);
            }
    
            this.DeleteEntity(entity);
        }
    #endregion
    
    #region Queries
        public global::System.Linq.IQueryable<global::ApplicationData.Implementation.NeededParts> NeededPartsSet_Single(string frameworkOperators, global::System.Nullable<int> Id)
        {
            return this.GetQuery<global::ApplicationData.Implementation.NeededParts>("NeededPartsSet_Single", frameworkOperators, Id);
        }
    
        public global::System.Linq.IQueryable<global::ApplicationData.Implementation.NeededParts> NeededPartsSet_SingleOrDefault(string frameworkOperators, global::System.Nullable<int> Id)
        {
            return this.GetQuery<global::ApplicationData.Implementation.NeededParts>("NeededPartsSet_SingleOrDefault", frameworkOperators, Id);
        }
    
        public global::System.Linq.IQueryable<global::ApplicationData.Implementation.NeededParts> NeededPartsSet_All(string frameworkOperators)
        {
            return this.GetQuery<global::ApplicationData.Implementation.NeededParts>("NeededPartsSet_All", frameworkOperators);
        }
    
        public global::System.Linq.IQueryable<global::ApplicationData.Implementation.AvailableParts> AvailablePartsSet_Single(string frameworkOperators, global::System.Nullable<int> Id)
        {
            return this.GetQuery<global::ApplicationData.Implementation.AvailableParts>("AvailablePartsSet_Single", frameworkOperators, Id);
        }
    
        public global::System.Linq.IQueryable<global::ApplicationData.Implementation.AvailableParts> AvailablePartsSet_SingleOrDefault(string frameworkOperators, global::System.Nullable<int> Id)
        {
            return this.GetQuery<global::ApplicationData.Implementation.AvailableParts>("AvailablePartsSet_SingleOrDefault", frameworkOperators, Id);
        }
    
        public global::System.Linq.IQueryable<global::ApplicationData.Implementation.AvailableParts> AvailablePartsSet_All(string frameworkOperators)
        {
            return this.GetQuery<global::ApplicationData.Implementation.AvailableParts>("AvailablePartsSet_All", frameworkOperators);
        }
    
        public global::System.Linq.IQueryable<global::ApplicationData.Implementation.PriceInfo> PriceInfoSet_Single(string frameworkOperators, global::System.Nullable<int> Id)
        {
            return this.GetQuery<global::ApplicationData.Implementation.PriceInfo>("PriceInfoSet_Single", frameworkOperators, Id);
        }
    
        public global::System.Linq.IQueryable<global::ApplicationData.Implementation.PriceInfo> PriceInfoSet_SingleOrDefault(string frameworkOperators, global::System.Nullable<int> Id)
        {
            return this.GetQuery<global::ApplicationData.Implementation.PriceInfo>("PriceInfoSet_SingleOrDefault", frameworkOperators, Id);
        }
    
        public global::System.Linq.IQueryable<global::ApplicationData.Implementation.PriceInfo> PriceInfoSet_All(string frameworkOperators)
        {
            return this.GetQuery<global::ApplicationData.Implementation.PriceInfo>("PriceInfoSet_All", frameworkOperators);
        }
    
        public global::System.Linq.IQueryable<global::ApplicationData.Implementation.StoreInfo> StoreInfoSet_Single(string frameworkOperators, global::System.Nullable<int> Id)
        {
            return this.GetQuery<global::ApplicationData.Implementation.StoreInfo>("StoreInfoSet_Single", frameworkOperators, Id);
        }
    
        public global::System.Linq.IQueryable<global::ApplicationData.Implementation.StoreInfo> StoreInfoSet_SingleOrDefault(string frameworkOperators, global::System.Nullable<int> Id)
        {
            return this.GetQuery<global::ApplicationData.Implementation.StoreInfo>("StoreInfoSet_SingleOrDefault", frameworkOperators, Id);
        }
    
        public global::System.Linq.IQueryable<global::ApplicationData.Implementation.StoreInfo> StoreInfoSet_All(string frameworkOperators)
        {
            return this.GetQuery<global::ApplicationData.Implementation.StoreInfo>("StoreInfoSet_All", frameworkOperators);
        }
    
        public global::System.Linq.IQueryable<global::ApplicationData.Implementation.NeededParts> Query2(string frameworkOperators)
        {
            return this.GetQuery<global::ApplicationData.Implementation.NeededParts>("Query2", frameworkOperators);
        }
    
        public global::System.Linq.IQueryable<global::ApplicationData.Implementation.NeededBoards> NeededBoardsSet_Single(string frameworkOperators, global::System.Nullable<int> Id)
        {
            return this.GetQuery<global::ApplicationData.Implementation.NeededBoards>("NeededBoardsSet_Single", frameworkOperators, Id);
        }
    
        public global::System.Linq.IQueryable<global::ApplicationData.Implementation.NeededBoards> NeededBoardsSet_SingleOrDefault(string frameworkOperators, global::System.Nullable<int> Id)
        {
            return this.GetQuery<global::ApplicationData.Implementation.NeededBoards>("NeededBoardsSet_SingleOrDefault", frameworkOperators, Id);
        }
    
        public global::System.Linq.IQueryable<global::ApplicationData.Implementation.NeededBoards> NeededBoardsSet_All(string frameworkOperators)
        {
            return this.GetQuery<global::ApplicationData.Implementation.NeededBoards>("NeededBoardsSet_All", frameworkOperators);
        }
    
        public global::System.Linq.IQueryable<global::ApplicationData.Implementation.Table1Item> Table1ItemSet_Single(string frameworkOperators, global::System.Nullable<int> Id)
        {
            return this.GetQuery<global::ApplicationData.Implementation.Table1Item>("Table1ItemSet_Single", frameworkOperators, Id);
        }
    
        public global::System.Linq.IQueryable<global::ApplicationData.Implementation.Table1Item> Table1ItemSet_SingleOrDefault(string frameworkOperators, global::System.Nullable<int> Id)
        {
            return this.GetQuery<global::ApplicationData.Implementation.Table1Item>("Table1ItemSet_SingleOrDefault", frameworkOperators, Id);
        }
    
        public global::System.Linq.IQueryable<global::ApplicationData.Implementation.Table1Item> Table1ItemSet_All(string frameworkOperators)
        {
            return this.GetQuery<global::ApplicationData.Implementation.Table1Item>("Table1ItemSet_All", frameworkOperators);
        }
    
    #endregion
    
        [global::System.ServiceModel.DomainServices.Server.Invoke(HasSideEffects=false)]
        public int __GetEntitySetCanInformation(string entitySetName)
        {
            return base.GetEntitySetCanInformation(entitySetName);
        }
    
        [global::System.ServiceModel.DomainServices.Server.Invoke(HasSideEffects=false)]
        public bool __CanExecuteOperation(string operationName)
        {
            return base.CanExecuteOperation(operationName);
        }
    
    #endregion
    
        protected override global::Microsoft.LightSwitch.IDataService CreateDataService()
        {
            return new global::LightSwitchApplication.DataWorkspace().ApplicationData;
        }
    
    }
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public class ApplicationDataServiceImplementation
        : global::Microsoft.LightSwitch.ServerGenerated.Implementation.DataServiceImplementation<global::ApplicationData.Implementation.ApplicationDataObjectContext>
    {
        public ApplicationDataServiceImplementation(global::Microsoft.LightSwitch.IDataService dataService) : base(dataService)
        {
        }
    
    #region Queries
        public global::System.Linq.IQueryable<global::ApplicationData.Implementation.NeededParts> NeededPartsSet_Single(global::System.Nullable<int> Id)
        {
            global::System.Linq.IQueryable<global::ApplicationData.Implementation.NeededParts> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::ApplicationData.Implementation.NeededParts>("NeededPartsSet_All"),
                (n) => (Id.HasValue && (n.Id == Id)));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::ApplicationData.Implementation.NeededParts> NeededPartsSet_SingleOrDefault(global::System.Nullable<int> Id)
        {
            global::System.Linq.IQueryable<global::ApplicationData.Implementation.NeededParts> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::ApplicationData.Implementation.NeededParts>("NeededPartsSet_All"),
                (n) => (Id.HasValue && (n.Id == Id)));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::ApplicationData.Implementation.NeededParts> NeededPartsSet_All()
        {
            global::System.Linq.IQueryable<global::ApplicationData.Implementation.NeededParts> query;
            query = base.CreateQuery<global::ApplicationData.Implementation.NeededParts>("[NeededPartsSet]").AsQueryable();
            return query;
        }
    
        public global::System.Linq.IQueryable<global::ApplicationData.Implementation.AvailableParts> AvailablePartsSet_Single(global::System.Nullable<int> Id)
        {
            global::System.Linq.IQueryable<global::ApplicationData.Implementation.AvailableParts> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::ApplicationData.Implementation.AvailableParts>("AvailablePartsSet_All"),
                (a) => (Id.HasValue && (a.Id == Id)));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::ApplicationData.Implementation.AvailableParts> AvailablePartsSet_SingleOrDefault(global::System.Nullable<int> Id)
        {
            global::System.Linq.IQueryable<global::ApplicationData.Implementation.AvailableParts> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::ApplicationData.Implementation.AvailableParts>("AvailablePartsSet_All"),
                (a) => (Id.HasValue && (a.Id == Id)));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::ApplicationData.Implementation.AvailableParts> AvailablePartsSet_All()
        {
            global::System.Linq.IQueryable<global::ApplicationData.Implementation.AvailableParts> query;
            query = base.CreateQuery<global::ApplicationData.Implementation.AvailableParts>("[AvailablePartsSet]").AsQueryable();
            return query;
        }
    
        public global::System.Linq.IQueryable<global::ApplicationData.Implementation.PriceInfo> PriceInfoSet_Single(global::System.Nullable<int> Id)
        {
            global::System.Linq.IQueryable<global::ApplicationData.Implementation.PriceInfo> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::ApplicationData.Implementation.PriceInfo>("PriceInfoSet_All"),
                (p) => (Id.HasValue && (p.Id == Id)));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::ApplicationData.Implementation.PriceInfo> PriceInfoSet_SingleOrDefault(global::System.Nullable<int> Id)
        {
            global::System.Linq.IQueryable<global::ApplicationData.Implementation.PriceInfo> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::ApplicationData.Implementation.PriceInfo>("PriceInfoSet_All"),
                (p) => (Id.HasValue && (p.Id == Id)));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::ApplicationData.Implementation.PriceInfo> PriceInfoSet_All()
        {
            global::System.Linq.IQueryable<global::ApplicationData.Implementation.PriceInfo> query;
            query = base.CreateQuery<global::ApplicationData.Implementation.PriceInfo>("[PriceInfoSet]").AsQueryable();
            return query;
        }
    
        public global::System.Linq.IQueryable<global::ApplicationData.Implementation.StoreInfo> StoreInfoSet_Single(global::System.Nullable<int> Id)
        {
            global::System.Linq.IQueryable<global::ApplicationData.Implementation.StoreInfo> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::ApplicationData.Implementation.StoreInfo>("StoreInfoSet_All"),
                (s) => (Id.HasValue && (s.Id == Id)));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::ApplicationData.Implementation.StoreInfo> StoreInfoSet_SingleOrDefault(global::System.Nullable<int> Id)
        {
            global::System.Linq.IQueryable<global::ApplicationData.Implementation.StoreInfo> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::ApplicationData.Implementation.StoreInfo>("StoreInfoSet_All"),
                (s) => (Id.HasValue && (s.Id == Id)));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::ApplicationData.Implementation.StoreInfo> StoreInfoSet_All()
        {
            global::System.Linq.IQueryable<global::ApplicationData.Implementation.StoreInfo> query;
            query = base.CreateQuery<global::ApplicationData.Implementation.StoreInfo>("[StoreInfoSet]").AsQueryable();
            return query;
        }
    
        public global::System.Linq.IQueryable<global::ApplicationData.Implementation.NeededParts> Query2()
        {
            global::System.Linq.IQueryable<global::ApplicationData.Implementation.NeededParts> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::ApplicationData.Implementation.NeededParts>("NeededPartsSet_All"),
                (n) => (n.Board.CompareTo(n.Board) == 0));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::ApplicationData.Implementation.NeededBoards> NeededBoardsSet_Single(global::System.Nullable<int> Id)
        {
            global::System.Linq.IQueryable<global::ApplicationData.Implementation.NeededBoards> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::ApplicationData.Implementation.NeededBoards>("NeededBoardsSet_All"),
                (n) => (Id.HasValue && (n.Id == Id)));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::ApplicationData.Implementation.NeededBoards> NeededBoardsSet_SingleOrDefault(global::System.Nullable<int> Id)
        {
            global::System.Linq.IQueryable<global::ApplicationData.Implementation.NeededBoards> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::ApplicationData.Implementation.NeededBoards>("NeededBoardsSet_All"),
                (n) => (Id.HasValue && (n.Id == Id)));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::ApplicationData.Implementation.NeededBoards> NeededBoardsSet_All()
        {
            global::System.Linq.IQueryable<global::ApplicationData.Implementation.NeededBoards> query;
            query = base.CreateQuery<global::ApplicationData.Implementation.NeededBoards>("[NeededBoardsSet]").AsQueryable();
            return query;
        }
    
        public global::System.Linq.IQueryable<global::ApplicationData.Implementation.Table1Item> Table1ItemSet_Single(global::System.Nullable<int> Id)
        {
            global::System.Linq.IQueryable<global::ApplicationData.Implementation.Table1Item> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::ApplicationData.Implementation.Table1Item>("Table1ItemSet_All"),
                (t) => (Id.HasValue && (t.Id == Id)));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::ApplicationData.Implementation.Table1Item> Table1ItemSet_SingleOrDefault(global::System.Nullable<int> Id)
        {
            global::System.Linq.IQueryable<global::ApplicationData.Implementation.Table1Item> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::ApplicationData.Implementation.Table1Item>("Table1ItemSet_All"),
                (t) => (Id.HasValue && (t.Id == Id)));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::ApplicationData.Implementation.Table1Item> Table1ItemSet_All()
        {
            global::System.Linq.IQueryable<global::ApplicationData.Implementation.Table1Item> query;
            query = base.CreateQuery<global::ApplicationData.Implementation.Table1Item>("[Table1ItemSet]").AsQueryable();
            return query;
        }
    
    #endregion

    #region Protected Methods
        protected override object CreateObject(global::System.Type type)
        {
            if (type == typeof(global::ApplicationData.Implementation.NeededParts))
            {
                return new global::ApplicationData.Implementation.NeededParts();
            }
            if (type == typeof(global::ApplicationData.Implementation.AvailableParts))
            {
                return new global::ApplicationData.Implementation.AvailableParts();
            }
            if (type == typeof(global::ApplicationData.Implementation.PriceInfo))
            {
                return new global::ApplicationData.Implementation.PriceInfo();
            }
            if (type == typeof(global::ApplicationData.Implementation.StoreInfo))
            {
                return new global::ApplicationData.Implementation.StoreInfo();
            }
            if (type == typeof(global::ApplicationData.Implementation.NeededBoards))
            {
                return new global::ApplicationData.Implementation.NeededBoards();
            }
            if (type == typeof(global::ApplicationData.Implementation.Table1Item))
            {
                return new global::ApplicationData.Implementation.Table1Item();
            }
    
            return base.CreateObject(type);
        }
    
        protected override global::ApplicationData.Implementation.ApplicationDataObjectContext CreateObjectContext()
        {
            return new global::ApplicationData.Implementation.ApplicationDataObjectContext(base.GetEntityConnectionString(
                "_IntrinsicData", 
                "res://*/ApplicationData.csdl|res://*/ApplicationData.ssdl|res://*/ApplicationData.msl",
                "System.Data.SqlClient"));
        }
    
        protected override global::Microsoft.LightSwitch.Internal.IEntityImplementation CreateEntityImplementation<T>()
        {
            if (typeof(T) == typeof(global::LightSwitchApplication.NeededParts))
            {
                return new global::ApplicationData.Implementation.NeededParts();
            }
            if (typeof(T) == typeof(global::LightSwitchApplication.AvailableParts))
            {
                return new global::ApplicationData.Implementation.AvailableParts();
            }
            if (typeof(T) == typeof(global::LightSwitchApplication.PriceInfo))
            {
                return new global::ApplicationData.Implementation.PriceInfo();
            }
            if (typeof(T) == typeof(global::LightSwitchApplication.StoreInfo))
            {
                return new global::ApplicationData.Implementation.StoreInfo();
            }
            if (typeof(T) == typeof(global::LightSwitchApplication.NeededBoards))
            {
                return new global::ApplicationData.Implementation.NeededBoards();
            }
            if (typeof(T) == typeof(global::LightSwitchApplication.Table1Item))
            {
                return new global::ApplicationData.Implementation.Table1Item();
            }
            return null;
        }
    
    #endregion
    
    }
    
    #region DataServiceImplementationFactory
    [global::System.ComponentModel.Composition.PartCreationPolicy(global::System.ComponentModel.Composition.CreationPolicy.Shared)]
    [global::System.ComponentModel.Composition.Export(typeof(global::Microsoft.LightSwitch.Internal.IDataServiceFactory))]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public class DataServiceFactory :
        global::Microsoft.LightSwitch.ServerGenerated.Implementation.DataServiceFactory
    {
    
        protected override global::Microsoft.LightSwitch.IDataService CreateDataService(global::System.Type dataServiceType)
        {
            if (dataServiceType == typeof(global::LightSwitchApplication.ApplicationData))
            {
                return new global::LightSwitchApplication.ApplicationDataService();
            }
            return base.CreateDataService(dataServiceType);
        }
    
        protected override global::Microsoft.LightSwitch.Internal.IDataServiceImplementation CreateDataServiceImplementation<TDataService>(TDataService dataService)
        {
            if (typeof(TDataService) == typeof(global::LightSwitchApplication.ApplicationData))
            {
                return new global::LightSwitchApplication.Implementation.ApplicationDataServiceImplementation(dataService);
            }
            return base.CreateDataServiceImplementation(dataService);
        }
    }
    #endregion
    
    [global::System.ComponentModel.Composition.PartCreationPolicy(global::System.ComponentModel.Composition.CreationPolicy.Shared)]
    [global::System.ComponentModel.Composition.Export(typeof(global::Microsoft.LightSwitch.Internal.ITypeMappingProvider))]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public class __TypeMapping
        : global::Microsoft.LightSwitch.Internal.ITypeMappingProvider
    {
        global::System.Type global::Microsoft.LightSwitch.Internal.ITypeMappingProvider.GetImplementationType(global::System.Type definitionType)
        {
            if (typeof(global::LightSwitchApplication.NeededParts) == definitionType)
            {
                return typeof(global::ApplicationData.Implementation.NeededParts);
            }
            if (typeof(global::LightSwitchApplication.AvailableParts) == definitionType)
            {
                return typeof(global::ApplicationData.Implementation.AvailableParts);
            }
            if (typeof(global::LightSwitchApplication.PriceInfo) == definitionType)
            {
                return typeof(global::ApplicationData.Implementation.PriceInfo);
            }
            if (typeof(global::LightSwitchApplication.StoreInfo) == definitionType)
            {
                return typeof(global::ApplicationData.Implementation.StoreInfo);
            }
            if (typeof(global::LightSwitchApplication.NeededBoards) == definitionType)
            {
                return typeof(global::ApplicationData.Implementation.NeededBoards);
            }
            if (typeof(global::LightSwitchApplication.Table1Item) == definitionType)
            {
                return typeof(global::ApplicationData.Implementation.Table1Item);
            }
            return null;
        }
    }
}

namespace ApplicationData.Implementation
{

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.ComponentModel.DataAnnotations.MetadataType(typeof(global::ApplicationData.Implementation.NeededParts.Metadata))]
    public partial class NeededParts :
        global::LightSwitchApplication.NeededParts.DetailsClass.IImplementation
    {
    
        global::System.Collections.IEnumerable global::LightSwitchApplication.NeededParts.DetailsClass.IImplementation.NeededBoardsCollection
        {
            get
            {
                return this.NeededBoardsCollection;
            }
        }
        
        global::Microsoft.LightSwitch.Internal.IEntityImplementation global::LightSwitchApplication.NeededParts.DetailsClass.IImplementation.AvailableParts
        {
            get
            {
                return this.AvailableParts;
            }
            set
            {
                this.AvailableParts = (global::ApplicationData.Implementation.AvailableParts)value;
                if (this.__host != null)
                {
                    this.__host.RaisePropertyChanged("AvailableParts");
                }
            }
        }
        
        partial void OnNeededParts_AvailablePartsChanged()
        {
            if (this.__host != null)
            {
                this.__host.RaisePropertyChanged("AvailableParts");
            }
        }
        
        #region IEntityImplementation Members
        private global::Microsoft.LightSwitch.Internal.IEntityImplementationHost __host;
        
        global::Microsoft.LightSwitch.Internal.IEntityImplementationHost global::Microsoft.LightSwitch.Internal.IEntityImplementation.Host
        {
            get
            {
                return this.__host;
            }
        }
        
        void global::Microsoft.LightSwitch.Internal.IEntityImplementation.Initialize(global::Microsoft.LightSwitch.Internal.IEntityImplementationHost host)
        {
            this.__host = host;
        }
        
        protected override void OnPropertyChanged(string propertyName)
        {
            base.OnPropertyChanged(propertyName);
            if (this.__host != null)
            {
                this.__host.RaisePropertyChanged(propertyName);
            }
        }
        #endregion
        
        internal class Metadata
        {
            [global::System.ServiceModel.DomainServices.Server.Include]
            public global::ApplicationData.Implementation.AvailableParts AvailableParts { get; set; }
        
        }
    }
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public partial class AvailableParts :
        global::LightSwitchApplication.AvailableParts.DetailsClass.IImplementation
    {
    
        global::System.Collections.IEnumerable global::LightSwitchApplication.AvailableParts.DetailsClass.IImplementation.PriceInfoCollection
        {
            get
            {
                return this.PriceInfoCollection;
            }
        }
        
        global::System.Collections.IEnumerable global::LightSwitchApplication.AvailableParts.DetailsClass.IImplementation.NeededPartsCollection
        {
            get
            {
                return this.NeededPartsCollection;
            }
        }
        
        #region IEntityImplementation Members
        private global::Microsoft.LightSwitch.Internal.IEntityImplementationHost __host;
        
        global::Microsoft.LightSwitch.Internal.IEntityImplementationHost global::Microsoft.LightSwitch.Internal.IEntityImplementation.Host
        {
            get
            {
                return this.__host;
            }
        }
        
        void global::Microsoft.LightSwitch.Internal.IEntityImplementation.Initialize(global::Microsoft.LightSwitch.Internal.IEntityImplementationHost host)
        {
            this.__host = host;
        }
        
        protected override void OnPropertyChanged(string propertyName)
        {
            base.OnPropertyChanged(propertyName);
            if (this.__host != null)
            {
                this.__host.RaisePropertyChanged(propertyName);
            }
        }
        #endregion
    }
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.ComponentModel.DataAnnotations.MetadataType(typeof(global::ApplicationData.Implementation.PriceInfo.Metadata))]
    public partial class PriceInfo :
        global::LightSwitchApplication.PriceInfo.DetailsClass.IImplementation
    {
    
        global::Microsoft.LightSwitch.Internal.IEntityImplementation global::LightSwitchApplication.PriceInfo.DetailsClass.IImplementation.StoreInfo
        {
            get
            {
                return this.StoreInfo;
            }
            set
            {
                this.StoreInfo = (global::ApplicationData.Implementation.StoreInfo)value;
                if (this.__host != null)
                {
                    this.__host.RaisePropertyChanged("StoreInfo");
                }
            }
        }
        
        partial void OnPriceInfo_StoreInfoChanged()
        {
            if (this.__host != null)
            {
                this.__host.RaisePropertyChanged("StoreInfo");
            }
        }
        
        global::Microsoft.LightSwitch.Internal.IEntityImplementation global::LightSwitchApplication.PriceInfo.DetailsClass.IImplementation.AvailableParts
        {
            get
            {
                return this.AvailableParts;
            }
            set
            {
                this.AvailableParts = (global::ApplicationData.Implementation.AvailableParts)value;
                if (this.__host != null)
                {
                    this.__host.RaisePropertyChanged("AvailableParts");
                }
            }
        }
        
        partial void OnAvailableParts_PriceInfoChanged()
        {
            if (this.__host != null)
            {
                this.__host.RaisePropertyChanged("AvailableParts");
            }
        }
        
        #region IEntityImplementation Members
        private global::Microsoft.LightSwitch.Internal.IEntityImplementationHost __host;
        
        global::Microsoft.LightSwitch.Internal.IEntityImplementationHost global::Microsoft.LightSwitch.Internal.IEntityImplementation.Host
        {
            get
            {
                return this.__host;
            }
        }
        
        void global::Microsoft.LightSwitch.Internal.IEntityImplementation.Initialize(global::Microsoft.LightSwitch.Internal.IEntityImplementationHost host)
        {
            this.__host = host;
        }
        
        protected override void OnPropertyChanged(string propertyName)
        {
            base.OnPropertyChanged(propertyName);
            if (this.__host != null)
            {
                this.__host.RaisePropertyChanged(propertyName);
            }
        }
        #endregion
        
        internal class Metadata
        {
            [global::System.ServiceModel.DomainServices.Server.Include]
            public global::ApplicationData.Implementation.StoreInfo StoreInfo { get; set; }
        
            [global::System.ServiceModel.DomainServices.Server.Include]
            public global::ApplicationData.Implementation.AvailableParts AvailableParts { get; set; }
        
        }
    }
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public partial class StoreInfo :
        global::LightSwitchApplication.StoreInfo.DetailsClass.IImplementation
    {
    
        global::System.Collections.IEnumerable global::LightSwitchApplication.StoreInfo.DetailsClass.IImplementation.PriceInfoCollection
        {
            get
            {
                return this.PriceInfoCollection;
            }
        }
        
        #region IEntityImplementation Members
        private global::Microsoft.LightSwitch.Internal.IEntityImplementationHost __host;
        
        global::Microsoft.LightSwitch.Internal.IEntityImplementationHost global::Microsoft.LightSwitch.Internal.IEntityImplementation.Host
        {
            get
            {
                return this.__host;
            }
        }
        
        void global::Microsoft.LightSwitch.Internal.IEntityImplementation.Initialize(global::Microsoft.LightSwitch.Internal.IEntityImplementationHost host)
        {
            this.__host = host;
        }
        
        protected override void OnPropertyChanged(string propertyName)
        {
            base.OnPropertyChanged(propertyName);
            if (this.__host != null)
            {
                this.__host.RaisePropertyChanged(propertyName);
            }
        }
        #endregion
    }
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.ComponentModel.DataAnnotations.MetadataType(typeof(global::ApplicationData.Implementation.NeededBoards.Metadata))]
    public partial class NeededBoards :
        global::LightSwitchApplication.NeededBoards.DetailsClass.IImplementation
    {
    
        global::Microsoft.LightSwitch.Internal.IEntityImplementation global::LightSwitchApplication.NeededBoards.DetailsClass.IImplementation.NeededParts
        {
            get
            {
                return this.NeededParts;
            }
            set
            {
                this.NeededParts = (global::ApplicationData.Implementation.NeededParts)value;
                if (this.__host != null)
                {
                    this.__host.RaisePropertyChanged("NeededParts");
                }
            }
        }
        
        partial void OnNeededBoards_NeededPartsChanged()
        {
            if (this.__host != null)
            {
                this.__host.RaisePropertyChanged("NeededParts");
            }
        }
        
        #region IEntityImplementation Members
        private global::Microsoft.LightSwitch.Internal.IEntityImplementationHost __host;
        
        global::Microsoft.LightSwitch.Internal.IEntityImplementationHost global::Microsoft.LightSwitch.Internal.IEntityImplementation.Host
        {
            get
            {
                return this.__host;
            }
        }
        
        void global::Microsoft.LightSwitch.Internal.IEntityImplementation.Initialize(global::Microsoft.LightSwitch.Internal.IEntityImplementationHost host)
        {
            this.__host = host;
        }
        
        protected override void OnPropertyChanged(string propertyName)
        {
            base.OnPropertyChanged(propertyName);
            if (this.__host != null)
            {
                this.__host.RaisePropertyChanged(propertyName);
            }
        }
        #endregion
        
        internal class Metadata
        {
            [global::System.ServiceModel.DomainServices.Server.Include]
            public global::ApplicationData.Implementation.NeededParts NeededParts { get; set; }
        
        }
    }
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public partial class Table1Item :
        global::LightSwitchApplication.Table1Item.DetailsClass.IImplementation
    {
    
        #region IEntityImplementation Members
        private global::Microsoft.LightSwitch.Internal.IEntityImplementationHost __host;
        
        global::Microsoft.LightSwitch.Internal.IEntityImplementationHost global::Microsoft.LightSwitch.Internal.IEntityImplementation.Host
        {
            get
            {
                return this.__host;
            }
        }
        
        void global::Microsoft.LightSwitch.Internal.IEntityImplementation.Initialize(global::Microsoft.LightSwitch.Internal.IEntityImplementationHost host)
        {
            this.__host = host;
        }
        
        protected override void OnPropertyChanged(string propertyName)
        {
            base.OnPropertyChanged(propertyName);
            if (this.__host != null)
            {
                this.__host.RaisePropertyChanged(propertyName);
            }
        }
        #endregion
    }
    
}

